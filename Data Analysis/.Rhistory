forecasted_data
comparison_df
model <- arima(ts_data, order = c(1, 0, 0))
forecast_values = forecast(model, h=length(test_data$GOLD.Close))
forecasted_data <- forecast_values$mean
comparison_df <- data.frame(Actual = test_data$GOLD.Close, Forecasted = forecasted_data)
comparison_df
model <- arima(ts_data, order = c(0, 0, 0))
forecast_values = forecast(model, h=length(test_data$GOLD.Close))
forecasted_data <- forecast_values$mean
comparison_df <- data.frame(Actual = test_data$GOLD.Close, Forecasted = forecasted_data)
squared_differences <- (comparison_df$GOLD.Close - comparison_df$Forecasted)^2
mse <- mean(squared_differences)
mse
plot(index(test_data$GOLD.Close), test_data$GOLD.Close, type = 'l')
lines(index(test_data$GOLD.Close), forecast_values$mean, col='red')
plot(index(training_data$GOLD.Close), training_data$GOLD.Close, type = 'l')
lines(index(test_data$GOLD.Close), test_data$GOLD.Close, type = 'l', col='cyan')
lines(index(test_data$GOLD.Close), comparison_df$Forecasted, col='red')
comparison_df
model <- arima(training_data$GOLD.Close, order = c(0, 0, 0))
forecast_values = forecast(model, h=length(test_data$GOLD.Close))
forecasted_data <- forecast_values$mean
comparison_df <- data.frame(Actual = test_data$GOLD.Close, Forecasted = forecasted_data)
squared_differences <- (comparison_df$GOLD.Close - comparison_df$Forecasted)^2
mse <- mean(squared_differences)
mse
plot(index(test_data$GOLD.Close), test_data$GOLD.Close, type = 'l')
lines(index(test_data$GOLD.Close), forecast_values$mean, col='red')
plot(index(training_data$GOLD.Close), training_data$GOLD.Close, type = 'l')
lines(index(test_data$GOLD.Close), test_data$GOLD.Close, type = 'l', col='cyan')
lines(index(test_data$GOLD.Close), comparison_df$Forecasted, col='red')
plot(index(test_data$GOLD.Close), test_data$GOLD.Close, type = 'l')
lines(index(test_data$GOLD.Close), comparison_df$Forecasted, col='red')
install.packages('rugarch')
model <- arima(ts_data, order = c(0, 0, 0))
forecast_values = forecast(model, h=length(test_data$GOLD.Close))
forecasted_data <- forecast_values$mean
comparison_df <- data.frame(Actual = test_data$GOLD.Close, Forecasted = forecasted_data)
plot(index(test_data$GOLD.Close), test_data$GOLD.Close, type = 'l')
lines(index(test_data$GOLD.Close), forecast_values$mean, col='red')
plot(index(training_data$GOLD.Close), training_data$GOLD.Close, type = 'l')
lines(index(test_data$GOLD.Close), test_data$GOLD.Close, type = 'l', col='cyan')
lines(index(test_data$GOLD.Close), comparison_df$Forecasted, col='red')
# MSE
squared_differences <- (comparison_df$GOLD.Close - comparison_df$Forecasted)^2
mse <- mean(squared_differences)
mse
# Likelihood
log_likelihood <- logLik(model, data=test_data$GOLD.Close)
log_likelihood
mse
RIMA(1, 0, 0)
ARIMA(1, 0, 0)
# ARIMA(1, 0, 0)
model <- arima(ts_data, order = c(1, 0, 0))
forecast_values = forecast(model, h=length(test_data$GOLD.Close))
forecasted_data <- forecast_values$mean
comparison_df <- data.frame(Actual = test_data$GOLD.Close, Forecasted = forecasted_data)
plot(index(test_data$GOLD.Close), test_data$GOLD.Close, type = 'l')
lines(index(test_data$GOLD.Close), forecast_values$mean, col='red')
plot(index(training_data$GOLD.Close), training_data$GOLD.Close, type = 'l')
lines(index(test_data$GOLD.Close), test_data$GOLD.Close, type = 'l', col='cyan')
lines(index(test_data$GOLD.Close), comparison_df$Forecasted, col='red')
# MSE
squared_differences <- (comparison_df$GOLD.Close - comparison_df$Forecasted)^2
mse <- mean(squared_differences)
mse
log_likelihood <- logLik(model, data=test_data$GOLD.Close)
log_likelihood
library(rugarch)
# GARCH
library(rugarch)
# GARCH
library(rugarch)
# Testing multiple models and estimating "goodness of fit"
# ARIMA(0, 1, 0)
model <- arima(ts_data, order = c(0, 1, 0))
forecast_values = forecast(model, h=length(test_data$GOLD.Close))
forecasted_data <- forecast_values$mean
comparison_df <- data.frame(Actual = test_data$GOLD.Close, Forecasted = forecasted_data)
plot(index(test_data$GOLD.Close), test_data$GOLD.Close, type = 'l')
lines(index(test_data$GOLD.Close), forecast_values$mean, col='red')
plot(index(training_data$GOLD.Close), training_data$GOLD.Close, type = 'l')
lines(index(test_data$GOLD.Close), test_data$GOLD.Close, type = 'l', col='cyan')
lines(index(test_data$GOLD.Close), comparison_df$Forecasted, col='red')
# ARIMA(1, 0, 0)
model <- arima(ts_data, order = c(1, 0, 0))
forecast_values = forecast(model, h=length(test_data$GOLD.Close))
forecasted_data <- forecast_values$mean
comparison_df <- data.frame(Actual = test_data$GOLD.Close, Forecasted = forecasted_data)
plot(index(test_data$GOLD.Close), test_data$GOLD.Close, type = 'l')
lines(index(test_data$GOLD.Close), forecast_values$mean, col='red')
plot(index(training_data$GOLD.Close), training_data$GOLD.Close, type = 'l')
lines(index(test_data$GOLD.Close), test_data$GOLD.Close, type = 'l', col='cyan')
lines(index(test_data$GOLD.Close), comparison_df$Forecasted, col='red')
# ARIMA(1, 0, 0)
model <- arima(ts_data, order = c(1, 1, 0))
forecast_values = forecast(model, h=length(test_data$GOLD.Close))
forecasted_data <- forecast_values$mean
comparison_df <- data.frame(Actual = test_data$GOLD.Close, Forecasted = forecasted_data)
plot(index(test_data$GOLD.Close), test_data$GOLD.Close, type = 'l')
lines(index(test_data$GOLD.Close), forecast_values$mean, col='red')
plot(index(training_data$GOLD.Close), training_data$GOLD.Close, type = 'l')
lines(index(test_data$GOLD.Close), test_data$GOLD.Close, type = 'l', col='cyan')
lines(index(test_data$GOLD.Close), comparison_df$Forecasted, col='red')
# Testing ARIMA(0, 1, 0) and estimating "goodness of fit"
model <- arima(ts_data, order = c(0, 1, 0))
forecast_values = forecast(model, h=length(test_data$GOLD.Close))
forecasted_data <- forecast_values$mean
comparison_df <- data.frame(Actual = test_data$GOLD.Close, Forecasted = forecasted_data)
plot(index(test_data$GOLD.Close), test_data$GOLD.Close, type = 'l')
lines(index(test_data$GOLD.Close), forecast_values$mean, col='red')
plot(index(training_data$GOLD.Close), training_data$GOLD.Close, type = 'l')
lines(index(test_data$GOLD.Close), test_data$GOLD.Close, type = 'l', col='cyan')
lines(index(test_data$GOLD.Close), comparison_df$Forecasted, col='red')
# MSE
squared_differences <- (comparison_df$GOLD.Close - comparison_df$Forecasted)^2
mse <- mean(squared_differences)
mse # 35.67165 => Bad fit
# Likelihood
log_likelihood <- logLik(model, data=test_data$GOLD.Close)
log_likelihood # -1901.824 => Same conclusion
library('readxl')
X <- read_excel("TP_AFC_majeur1718_travail.xlsx")
setwd("~/Uni/Saint-Etiennes/Semester 7/Data Science/TP/Analyse des données")
X <- read_excel("TP_AFC_majeur1718_travail.xlsx")
X <- as.data.frame(X[, 2:3])
print(head(X))
library('readxl')
X <- read_excel("TP_AFC_majeur1718_travail.xlsx")
X <- as.data.frame(X[, 2:3])
View(X)
View(X)
V0 <- with(X, table(Sexe, Fonction))
k <- length(X[,1])
V <- V0/k
print(V)
V0 <- with(X, table(Sexe, Fonction))
rownames(V0) <- c("Non répondu", "H", "F")
colnames(V0) <- c("Non répondu", "Administratif", "Technicien (OS)",
"Ingénieur", "Technicien supérieur", "Direction",
"Contractuel S1", "Contractuel S2")
k <- length(X[,1])
V <- V0/k
print(V)
View(X)
View(X)
# Read data from excel
X <- read_excel("TP_AFC_majeur1718_travail.xlsx", na=" ")
X <- as.data.frame(X[, 2:3])
# Add column names
V0 <- with(X, table(Sexe, Fonction))
rownames(V0) <- c("Non répondu", "H", "F")
colnames(V0) <- c("Non répondu", "Administratif", "Technicien (OS)",
"Ingénieur", "Technicien supérieur", "Direction",
"Contractuel S1", "Contractuel S2")
k <- length(X[,1])
V <- V0/k
print(V)
k
I <- length(unique(X[, 2]))
J <- length(unique(X[, 3]))
# Read data from excel
X <- read_excel("TP_AFC_majeur1718_travail.xlsx", na=" ")
X <- as.data.frame(X[, 2:3])
# Add column names
V0 <- with(X, table(Sexe, Fonction))
rownames(V0) <- c("Non répondu", "H", "F")
colnames(V0) <- c("Non répondu", "Administratif", "Technicien (OS)",
"Ingénieur", "Technicien supérieur", "Direction",
"Contractuel S1", "Contractuel S2")
k <- length(X[,1])
V <- V0/k
print(V)
I <- length(unique(X[, 1]))
J <- length(unique(X[, 2]))
# Read data from excel
X <- read_excel("TP_AFC_majeur1718_travail.xlsx", na=" ")
X <- as.data.frame(X[, 2:3])
na.omit(X)
# Add column names
V0 <- with(X, table(Sexe, Fonction))
rownames(V0) <- c("Non répondu", "H", "F")
colnames(V0) <- c("Non répondu", "Administratif", "Technicien (OS)",
"Ingénieur", "Technicien supérieur", "Direction",
"Contractuel S1", "Contractuel S2")
k <- length(X[,1])
V <- V0/k
print(V)
I <- length(unique(X[, 1]))
J <- length(unique(X[, 2]))
k
X <- na.omit(X)
# Add column names
V0 <- with(X, table(Sexe, Fonction))
rownames(V0) <- c("Non répondu", "H", "F")
colnames(V0) <- c("Non répondu", "Administratif", "Technicien (OS)",
"Ingénieur", "Technicien supérieur", "Direction",
"Contractuel S1", "Contractuel S2")
k <- length(X[,1])
V <- V0/k
print(V)
I <- length(unique(X[, 1]))
J <- length(unique(X[, 2]))
Dn <- diag(I)
rownames(Dn) <- c("Non répondu", "H", "F")
colnames(Dn) <- c("Non répondu", "H", "F")
Dn
Dp <- diag(J)
rownames(Dp) <- c("Non répondu", "Administratif", "Technicien (OS)",
"Ingénieur", "Technicien supérieur", "Direction",
"Contractuel S1", "Contractuel S2")
colnames(Dp) <- c("Non répondu", "Administratif", "Technicien (OS)",
"Ingénieur", "Technicien supérieur", "Direction",
"Contractuel S1", "Contractuel S2")
Dp
# Read data from excel
X <- read_excel("TP_AFC_majeur1718_travail.xlsx", na=" ")
X <- as.data.frame(X[, 2:3])
X <- na.omit(X)
# Add column names
V0 <- with(X, table(Sexe, Fonction))
rownames(V0) <- c("Non répondu", "H", "F")
colnames(V0) <- c("Non répondu", "Administratif", "Technicien (OS)",
"Ingénieur", "Technicien supérieur", "Direction",
"Contractuel S1", "Contractuel S2")
k <- length(X[,1])
V <- V0/k
print(V)
I <- length(unique(X[, 1]))
J <- length(unique(X[, 2]))
Dn <- diag(I)
rownames(Dn) <- c("Non répondu", "H", "F")
colnames(Dn) <- c("Non répondu", "H", "F")
Dp <- diag(J)
rownames(Dp) <- c("Non répondu", "Administratif", "Technicien (OS)",
"Ingénieur", "Technicien supérieur", "Direction",
"Contractuel S1", "Contractuel S2")
colnames(Dp) <- c("Non répondu", "Administratif", "Technicien (OS)",
"Ingénieur", "Technicien supérieur", "Direction",
"Contractuel S1", "Contractuel S2")
Dn
Dp
for (i in 1:I) {
S <- 0
for (j in 1:J) {
S <- S + V[i,j]
}
Dn[i,i] <- S
}
for (j in 1:J) {
S <- 0
for (i in 1:I) {
S <- S + V[i,j]
}
Dp[j,j] <- S
}
print(Dn)
print(Dp)
line_profiles <- solve(Dn) %*% V
print(line_profiles)
column_profiles <- solve(Dp) %*% t(V)
print(column_profiles)
S
A <- sqrt(solve(Dn)) %*% t(V) %*% line_profiles %*% sqrt(solve(Dn))
A <- sqrt(solve(Dn)) %*% V %*% line_profiles %*% sqrt(solve(Dn))
A <- sqrt(solve(Dp)) %*% t(V) %*% line_profiles %*% sqrt(solve(Dp))
print(A)
decomp1 <- eigen(A)
eigen_values1 <- decomp1$values
eigen_vectors1 <- decomp1$vectors
print(eigen_values1)
print(eigen_vectors1)
inertie <- eigen_values1
inertie_cumulee <- rep(0, length(eigen_values1))
for (i in 1:length(eigen_values1)) {
inertie_cumulee[i]<-sum(eigen_values1[1:i])
}
barplot(t(as.matrix(cbind(inertie,inertie_cumulee))),
beside = TRUE,
legend.text = TRUE,
ylab = "Inertie",
xlab = "Vecteurs Propres")
decomp1 <- eigen(S)
eigen_values1 <- decomp1$values
eigen_vectors1 <- decomp1$vectors
print(eigen_values1)
print(eigen_vectors1)
S <- t(V) %*% line_profiles %*% solve(Dp)
A <- sqrt(solve(Dp)) %*% t(V) %*% line_profiles %*% sqrt(solve(Dp))
print(A)
decomp1 <- eigen(A)
eigen_values1 <- decomp1$values
eigen_vectors1 <- decomp1$vectors
print(eigen_values1)
print(eigen_vectors1)
print(line_profiles)
t(V)
line_profiles
solve(Dp)
# (8 x 3) (3 x 8) (8 x 8) = 8 x 8
S <- t(V) %*% line_profiles %*% solve(Dp)
S
library('readxl')
# Read data from excel
X <- read_excel("TP_AFC_majeur1718_travail.xlsx", na=" ")
X <- as.data.frame(X[, 2:3])
X <- na.omit(X)
# Add column names
V0 <- with(X, table(Sexe, Fonction))
rownames(V0) <- c("Non répondu", "H", "F")
colnames(V0) <- c("Non répondu", "Administratif", "Technicien (OS)",
"Ingénieur", "Technicien supérieur", "Direction",
"Contractuel S1", "Contractuel S2")
k <- length(X[,1])
V <- V0/k
print(V)
I <- length(unique(X[, 1]))
J <- length(unique(X[, 2]))
Dn <- diag(I)
rownames(Dn) <- c("Non répondu", "H", "F")
colnames(Dn) <- c("Non répondu", "H", "F")
Dp <- diag(J)
rownames(Dp) <- c("Non répondu", "Administratif", "Technicien (OS)",
"Ingénieur", "Technicien supérieur", "Direction",
"Contractuel S1", "Contractuel S2")
colnames(Dp) <- c("Non répondu", "Administratif", "Technicien (OS)",
"Ingénieur", "Technicien supérieur", "Direction",
"Contractuel S1", "Contractuel S2")
for (i in 1:I) {
S <- 0
for (j in 1:J) {
S <- S + V[i,j]
}
Dn[i,i] <- S
}
for (j in 1:J) {
S <- 0
for (i in 1:I) {
S <- S + V[i,j]
}
Dp[j,j] <- S
}
print(Dn)
print(Dp)
line_profiles <- solve(Dn) %*% V
print(line_profiles)
column_profiles <- solve(Dp) %*% t(V)
print(column_profiles)
S <- t(V) %*% line_profiles %*% solve(Dp)
S
A <- sqrt(solve(Dp)) %*% t(V) %*% line_profiles %*% sqrt(solve(Dp))
print(A)
decomp1 <- eigen(A)
eigen_values1 <- decomp1$values
eigen_vectors1 <- decomp1$vectors
print(eigen_values1)
print(eigen_vectors1)
u1 <- sqrt(Dp) %*% eigen_vectors1[,1]
u2 <- sqrt(Dp) %*% eigen_vectors1[,2]
plot(C1, C2,type="p", xlim=c(-0.15,0.05), ylim=c(-0.05, 0.06), col='blue')
plot(C1, C2,type="p", xlim=c(-0.15,0.05), ylim=c(-0.05, 0.06), col='blue')
C1 <- V %*% u1
C2 <- V %*% u2
plot(C1, C2,type="p", xlim=c(-0.15,0.05), ylim=c(-0.05, 0.06), col='blue')
text(C1, C2, colnames(V), cex=0.7 , pos=3, col='blue')
abline(h=0, col="gray")
abline(v=0, col="gray")
plot(C1, C2,type="p", col='blue')
text(C1, C2, colnames(V), cex=0.7 , pos=3, col='blue')
abline(h=0, col="gray")
abline(v=0, col="gray")
plot(C1, C2,type="p", xlim=c(-0.15,0.05), ylim=c(-0.05, 0.06), col='blue')
text(C1, C2, colnames(V), cex=0.7 , pos=3, col='blue')
abline(h=0, col="gray")
abline(v=0, col="gray")
plot(C1, C2,type="p", xlim=c(-0.15,0.05), ylim=c(-0.1, 0.1), col='blue')
text(C1, C2, colnames(V), cex=0.7 , pos=3, col='blue')
abline(h=0, col="gray")
abline(v=0, col="gray")
plot(C1, C2, type="p", xlim=c(-0.15,0.05), ylim=c(-0.1, 0.1), col='red')
text(C1, C2, colnames(V), cex=0.7 , pos=3, col='blue')
abline(h=0, col="gray")
abline(h=0, col="gray")
abline(v=0, col="gray")
plot(C1, C2, type="p", xlim=c(-0.15,0.05), ylim=c(-0.1, 0.1), col='blue')
text(C1, C2, colnames(V), cex=0.7 , pos=3, col='blue')
abline(h=0, col="gray")
abline(v=0, col="gray")
text(C1, C2, rownames(V), cex=0.7 , pos=3, col='blue')
plot(C1, C2, type="p", xlim=c(-0.15,0.05), ylim=c(-0.1, 0.1), col='blue')
text(C1, C2, rownames(V), cex=0.7 , pos=3, col='blue')
abline(h=0, col="gray")
abline(v=0, col="gray")
A2 <- sqrt(solve(Dn)) %*% V %*% column_profiles %*% sqrt(solve(Dn))
T <- V %*% column_profiles %*% solve(Dn)
A2 <- sqrt(solve(Dn)) %*% V %*% column_profiles %*% sqrt(solve(Dn))
print(A2)
decomp2 <- eigen(A2)
eigen_values2 <- decomp2$values
eigen_vectors2 <- decomp2$vectors
print(eigen_values2)
print(eigen_vectors2)
print(eigen_values2)
print(eigen_vectors2)
u1_2 <- sqrt(Dn) %*% eigen_vectors2[,1]
u2_2 <- sqrt(Dn) %*% eigen_vectors2[,2]
C1_2 <- t(V) %*% u1
C2_2 <- t(V) %*% u2
plot(C1_2, C2_2, type="p", xlim=c(-0.15,0.05), ylim=c(-0.1, 0.1), col='blue')
print(eigen_values2)
print(eigen_vectors2)
u1_2 <- sqrt(Dn) %*% eigen_vectors2[,1]
u2_2 <- sqrt(Dn) %*% eigen_vectors2[,2]
C1_2 <- t(V) %*% u1
plot(C1_2, C2_2, type="p", xlim=c(-0.15,0.05), ylim=c(-0.1, 0.1), col='blue')
C1_2 <- t(V) %*% u1
C1_2 <- t(V) %*% u1_2
C2_2 <- t(V) %*% u2_2
plot(C1_2, C2_2, type="p", xlim=c(-0.15,0.05), ylim=c(-0.1, 0.1), col='blue')
text(C1_2, C2_2, colnames(V), cex=0.7 , pos=3, col='blue')
abline(h=0, col="gray")
abline(v=0, col="gray")
plot(C1, C2, pch = 24, cex=1, col="blue", lwd=2, xlim=c(-0.15, 0.05), ylim=c(-0.1, 0.1))
text(C1, C2, colnames(V),cex=0.75,col="blue", pos=3)
points(C1_2, C2_2, pch = 25, cex=1, col="red", lwd=2)
text(C1bis,C2bis,rownames(V),cex=0.75,col="red", pos=1)
abline(h=0 ,col = "gray")
plot(C1, C2, pch = 24, cex=1, col="blue", lwd=2, xlim=c(-0.15, 0.05), ylim=c(-0.1, 0.1))
text(C1, C2, colnames(V),cex=0.75,col="blue", pos=3)
points(C1_2, C2_2, pch = 25, cex=1, col="red", lwd=2)
text(C1_2, C2_2, rownames(V), cex=0.75,col="red", pos=1)
abline(h=0 ,col = "gray")
abline(v=0, col = "gray")
plot(C1, C2, pch = 24, cex=1, col="blue", lwd=2, xlim=c(-0.15, 0.05), ylim=c(-0.1, 0.1))
text(C1, C2, rownames(V),cex=0.75,col="blue", pos=3)
points(C1_2, C2_2, pch = 25, cex=1, col="red", lwd=2)
text(C1_2, C2_2, colnames(V), cex=0.75,col="red", pos=1)
abline(h=0 ,col = "gray")
abline(v=0, col = "gray")
# Nouvelles coordonnées dans Rn
co_lignes2 <- V %*% sqrt(Dp) %*% eigen_vectors1
# Nouvelles coordonnées dans Rn
co_colonnes2 <- t(V) %*% sqrt(Dn) %*% eigen_vectors2
A <- sum((n[i,]^2))
quality <- function(n, i, k) {
A <- sum((n[i,]^2))
B <- sum((n[i,1:k]^2))
return(B/A)
}
# Qualité des projections sur Rp
quality1 <- rep(0,7)
for (i in 1:7) {
quality1[i] <- quality(co_lignes2,i,2)
}
# Qualité des projections sur Rp
quality1 <- rep(0,3)
for (i in 1:7) {
quality1[i] <- quality(co_lignes2,i,2)
}
# Qualité des projections sur Rp
quality2 <- rep(0,3)
quality2 <- rep(0,7)
for (i in 1:7) {
quality2[i] <- quality(co_colonnes2,i,2)
}
print(quality1)
print(quality2)
library("FactoMineR")
library("FactoMineR")
library("FactoMineR")
library("ggplot2")
library("datasets")
library("dplyr")
library("gplots")
library("FactoMineR")
library("factoextra")
library("gplots")
library("dplyr")
library("FactoMineR")
library("factoextra")
library("datasets")
library("ggplot2")
library("gplots")
library("datasets")
library("ggplot2")
library("gplots")
library("dplyr")
contg <- V0
dt <- as.table(as.matrix(contg))
colnames(dt) <- c('0','1','2','3','4','5','6','7')
balloonplot(t(dt), main = "Table de contingence", xlab = "fonction", ylab = "sexe", label = TRUE, show.margins = TRUE)
chisq <- chisq.test(contg)
chisq
res.ca <- CA(contg, graph = FALSE)
res.ca <- CA(contg, graph = FALSE)
library("gmodels")
library("datasets")
library("ggplot2")
library("gplots")
library("gmodels")
library("dplyr")
contg <- V0
dt <- as.table(as.matrix(contg))
colnames(dt) <- c('0','1','2','3','4','5','6','7')
balloonplot(t(dt), main = "Table de contingence", xlab = "fonction", ylab = "sexe", label = TRUE, show.margins = TRUE)
chisq <- chisq.test(contg)
chisq
res.ca <- CA(contg, graph = FALSE)
library("FactoMineR")
library("factoextra")
